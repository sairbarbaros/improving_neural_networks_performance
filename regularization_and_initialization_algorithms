import numpy as np

#You can load your dataset via pandas, tensorflow, and et cetera.
train_X, train_Y, test_X, test_Y = #load_dataset()

#Let's build a model with forward and back propagation computations.

def neural_model(X, Y, learning_rate=0.3, num_iterations=10000, lambd=0, keep_prob=1 ):
    """
    We are going to implement a three-layered neural-network
    :param X: Input data, (input_size, num_of_examples)
    :param Y: True labels, (output_size, num_of_examples)
    :param learning_rate: the hyperparameter of cost optimization
    :param num_iterations: number of iterations
    :param lambd: regularization hyperparameter
    :param keep_prob: probability of keeping a neuron active
    :return: parameters-- learned by model
    """

    costs = []
    grads = {}

    m = X.shape[1]
    layer_dims = [X.shape[0], 10, 5, 1]

    #Initialize parameters by He initialization.
    parameters = initialize_parameters(layer_dims)

    for i in range(1, num_iterations):

        #You can find forward_propagation function in my fundamentals of neural networks repo.
        if keep_prob == 1:
            a3, cache = forward_propagation(X, parameters)
        elif keep_prob < 1:
            a3, cache = forward_prop_with_dropout(X, parameters, keep_prob)


        #You can find compute_cost function in my fundamentals of neural networks repo, wait for with regularization!
        if lambd == 0:
            cost = compute_cost(a3, Y)
        else:
            cost = cost_with_L2_regularization(a3, Y, parameters, lambd)

        #You can find backward_propagation algorith in my fundamentals of neural networks repo. Wait for regularization!
        if lambd == 0 and keep_prob == 1:
            grads = backward_propagation(X, Y, cache)
        elif lambd != 0:
            grads = backward_prop_with_L2_regularization(X, Y, cache, lambd)
        elif keep_prob < 1:
            grads = backward_prop_with_dropout(X, Y, cache, keep_prob)

        #Let's update parameters
        parameters = update_parameters(parameters, grads, learning_rate)

    return parameters

def initialize_parameters(layer_dims):
    """
    :param layer_dims: list containing size of layers, array
    :return: initialized parameters, dictionary
    """

    parameters = {}
    L = len(layer_dims)

    for l in range(1, L):

        parameters['W' + str(l)] = np.random.randn(layer_dims[l], layer_dims[l-1]) * np.sqrt(2./layer_dims[l-1])
        parameters['b' + str(l)] = np.zeros((layer_dims[l], 1)) * np.sqrt(2. / layer_dims[l - 1])

    return parameters

def cost_with_L2_regularization(A3, Y, parameters,lambd):
    """

    :param A3: Output of forward-prop, (output_size, num_of_examples)
    :param Y: True labels, (output_size, num_of_examples)
    :param parameters: parameters, dictionary
    :param lambd: the hyperparameter of L2 regularization
    :return: cost -- revised cost
    """

    m = Y.shape[1]
    W1 = parameters["W1"]
    W2 = parameters["W2"]
    W3 = parameters["W3"]

    #Computes non-regularized standard cross-entropy-cost. You can find this function in my fundamentals of neural networks repo.
    previous_cost = compute_cost(A3, Y)
    L2_regularization_cost = (1 / m) * (lambd / 2) * (np.sum(np.square(W1)) + np.sum(np.square(W2)) + np.sum(np.square(W3)))
    cost = previous_cost + L2_regularization_cost

    return cost

def backward_prop_with_L2_regularization(X, Y, cache, lambd):
    """

    :param X: input data, (input_size, num_of_examples)
    :param Y: true labels, (output_size, num_of_examples)
    :param cache: stored caches from forward prop
    :param lambd: the hyperparameter of L2 regularization
    :return: gradients -- dictionary
    """

    m = X.shape[1]
    (Z1, A1, W1, b1, Z2, A2, W2, b2, Z3, A3, W3, b3) = cache

    dZ3 = A3 - Y
    dW3 = 1. / m * np.dot(dZ3, A2.T) + (lambd / m) * W3
    db3 = 1. / m * np.sum(dZ3, axis=1, keepdims=True)

    dA2 = np.dot(W3.T, dZ3)
    dZ2 = np.multiply(dA2, np.int64(A2 > 0))
    dW2 = 1. / m * np.dot(dZ2, A1.T) + (lambd / m) * W2
    db2 = 1. / m * np.sum(dZ2, axis=1, keepdims=True)

    dA1 = np.dot(W2.T, dZ2)
    dZ1 = np.multiply(dA1, np.int64(A1 > 0))
    dW1 = 1. / m * np.dot(dZ1, X.T) + (lambd / m) * W1
    db1 = 1. / m * np.sum(dZ1, axis=1, keepdims=True)

    gradients = {"dZ3": dZ3, "dW3": dW3, "db3": db3, "dA2": dA2,
                 "dZ2": dZ2, "dW2": dW2, "db2": db2, "dA1": dA1,
                 "dZ1": dZ1, "dW1": dW1, "db1": db1}

    return gradients

def forward_prop_with_dropout(X, parameters, keep_prob=0.5):
    """

    :param X: input dataset, (2, num_of_examples)
    :param parameters: parameters, dictionary
    :param keep_prob: probability of keeping neurons active
    :return: A3-- output of forward propagation
            cache-- cached info, tuple
    """

    W1 = parameters["W1"]
    b1 = parameters["b1"]
    W2 = parameters["W2"]
    b2 = parameters["b2"]
    W3 = parameters["W3"]
    b3 = parameters["b3"]

    Z1 = np.dot(W1, X) + b1
    #Relu activation function
    A1 = relu(Z1)

    D1 = np.random.rand(A1.shape[0], A1.shape[1])
    D1 = (D1 < keep_prob).astype(int)
    A1 = A1 * D1
    A1 = A1 / keep_prob

    Z2 = np.dot(W2, A1) + b2
    A2 = relu(Z2)

    D2 = np.random.rand(A2.shape[0], A2.shape[1])
    D2 = (D2 < keep_prob).astype(int)
    A2 = A2 * D2
    A2 = A2 / keep_prob

    Z3 = np.dot(W3, A2) + b3
    A3 = sigmoid(Z3)

    cache = (Z1, D1, A1, W1, b1, Z2, D2, A2, W2, b2, Z3, A3, W3, b3)

    return A3, cache

def backward_prop_with_dropout(X, Y, cache, keep_prob):
    """

    :param X: input dataset, (2, num_of_examples)
    :param keep_prob: probability of keeping neurons active
    :param cache: cached info, tuple
    :param keep_prob: probability of keeping neurons active
    :return: gradients -- revised gradients
    """

    m = X.shape[1]
    (Z1, D1, A1, W1, b1, Z2, D2, A2, W2, b2, Z3, A3, W3, b3) = cache

    dZ3 = A3 - Y
    dW3 = 1. / m * np.dot(dZ3, A2.T)
    db3 = 1. / m * np.sum(dZ3, axis=1, keepdims=True)

    dA2 = np.dot(W3.T, dZ3)
    dA2 = dA2 * D2
    dA2 = dA2 / keep_prob
    dZ2 = np.multiply(dA2, np.int64(A2 > 0))
    dW2 = 1. / m * np.dot(dZ2, A1.T)
    db2 = 1. / m * np.sum(dZ2, axis=1, keepdims=True)

    dA1 = np.dot(W2.T, dZ2)
    dA1 = dA1*D1
    dA1 = dA1/keep_prob
    dZ1 = np.multiply(dA1, np.int64(A1 > 0))
    dW1 = 1. / m * np.dot(dZ1, X.T)
    db1 = 1. / m * np.sum(dZ1, axis=1, keepdims=True)

    gradients = {"dZ3": dZ3, "dW3": dW3, "db3": db3, "dA2": dA2,
                 "dZ2": dZ2, "dW2": dW2, "db2": db2, "dA1": dA1,
                 "dZ1": dZ1, "dW1": dW1, "db1": db1}

    return gradients
